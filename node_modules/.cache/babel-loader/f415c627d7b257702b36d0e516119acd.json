{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darko\\\\Desktop\\\\01-starting-setup\\\\src\\\\App.js\";\nimport Expenses from \"./components/Expenses/Expenses\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  //Regularan kod u JS. Zove se jos i imperative approach, jer ja dajem tacne instrukcije, korak po korak sta ce JS i pretrazivac uraditi\n  // const para = document.createElement(\"p\");\n  // para.textContent = \"This is also visible!\";\n  // document.getElementById(\"root\").append(para);\n  const expenses = [{\n    id: \"e1\",\n    title: \"Toilet Paper\",\n    amount: 94.12,\n    date: new Date(2020, 7, 14)\n  }, {\n    id: \"e2\",\n    title: \"New TV\",\n    amount: 799.49,\n    date: new Date(2021, 2, 12)\n  }, {\n    id: \"e3\",\n    title: \"Car Insurance\",\n    amount: 294.67,\n    date: new Date(2021, 2, 28)\n  }, {\n    id: \"e4\",\n    title: \"New Desk (Wooden)\",\n    amount: 450,\n    date: new Date(2021, 5, 12)\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Let's get started!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Expenses, {\n      items: expenses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\nexport default App; //JSX kod je zapravo HTML kod unutar JS\n//JSX je zapravo JS XML\n//Kad udjem u source u konzoli, vidim folder static/js koji sadrzi neke JS fajlove. Ti JS fajlovi sadrze kodove celog paketa React\n//U tim fajlovima negde mora biti ime nase f-je(u ovom slucaju App), ali izgleda drugacije nego nasa ovde. To je kod koji se pokrece u pretrazivacu odnosno to jetransformisani kod nase f-je App\n//Sa Reactom, koji ima declarative approach, mi samo definisemo zeljeni kraj, da zelimo div, h2 tag, paragraf i slicno i React ce sam da nam to pokaze na ekranu\n//Ubacim u kodu, u f-ji App gde hocu nas kod iz uvezenog fajla, sacuvam i pokrenem server. Kad upisujem tu ime te f-je, koja je importovana, uvek mora biti veliko slovo\n//Ako hocu da imam razlicite podatke, definisem ih u nizu, zatim dole gde sam stavio ime f-je koju uvozim stavim njihove podatke, kao sto je ovde uradjeno\n//Moglo je ovde da se pise i hard-cod podaci, jer props podrzava i to, ali nije pozeljno\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Darko/Desktop/01-starting-setup/src/App.js"],"names":["Expenses","App","expenses","id","title","amount","date","Date"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,gCAArB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB;AACA;AACA;AACA;AACA,QAAMC,QAAQ,GAAG,CACf;AACEC,IAAAA,EAAE,EAAE,IADN;AAEEC,IAAAA,KAAK,EAAE,cAFT;AAGEC,IAAAA,MAAM,EAAE,KAHV;AAIEC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,GADe,EAOf;AAAEJ,IAAAA,EAAE,EAAE,IAAN;AAAYC,IAAAA,KAAK,EAAE,QAAnB;AAA6BC,IAAAA,MAAM,EAAE,MAArC;AAA6CC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAAnD,GAPe,EAQf;AACEJ,IAAAA,EAAE,EAAE,IADN;AAEEC,IAAAA,KAAK,EAAE,eAFT;AAGEC,IAAAA,MAAM,EAAE,MAHV;AAIEC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,GARe,EAcf;AACEJ,IAAAA,EAAE,EAAE,IADN;AAEEC,IAAAA,KAAK,EAAE,mBAFT;AAGEC,IAAAA,MAAM,EAAE,GAHV;AAIEC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,GAde,CAAjB;AAsBA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEL;AAAjB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAjCD;;KAAMD,G;AAmCN,eAAeA,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA","sourcesContent":["import Expenses from \"./components/Expenses/Expenses\";\n\nconst App = () => {\n  //Regularan kod u JS. Zove se jos i imperative approach, jer ja dajem tacne instrukcije, korak po korak sta ce JS i pretrazivac uraditi\n  // const para = document.createElement(\"p\");\n  // para.textContent = \"This is also visible!\";\n  // document.getElementById(\"root\").append(para);\n  const expenses = [\n    {\n      id: \"e1\",\n      title: \"Toilet Paper\",\n      amount: 94.12,\n      date: new Date(2020, 7, 14),\n    },\n    { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\n    {\n      id: \"e3\",\n      title: \"Car Insurance\",\n      amount: 294.67,\n      date: new Date(2021, 2, 28),\n    },\n    {\n      id: \"e4\",\n      title: \"New Desk (Wooden)\",\n      amount: 450,\n      date: new Date(2021, 5, 12),\n    },\n  ];\n\n  return (\n    <div>\n      <h2>Let's get started!</h2>\n      <Expenses items={expenses} />\n    </div>\n  );\n};\n\nexport default App;\n\n//JSX kod je zapravo HTML kod unutar JS\n//JSX je zapravo JS XML\n//Kad udjem u source u konzoli, vidim folder static/js koji sadrzi neke JS fajlove. Ti JS fajlovi sadrze kodove celog paketa React\n//U tim fajlovima negde mora biti ime nase f-je(u ovom slucaju App), ali izgleda drugacije nego nasa ovde. To je kod koji se pokrece u pretrazivacu odnosno to jetransformisani kod nase f-je App\n//Sa Reactom, koji ima declarative approach, mi samo definisemo zeljeni kraj, da zelimo div, h2 tag, paragraf i slicno i React ce sam da nam to pokaze na ekranu\n\n//Ubacim u kodu, u f-ji App gde hocu nas kod iz uvezenog fajla, sacuvam i pokrenem server. Kad upisujem tu ime te f-je, koja je importovana, uvek mora biti veliko slovo\n\n//Ako hocu da imam razlicite podatke, definisem ih u nizu, zatim dole gde sam stavio ime f-je koju uvozim stavim njihove podatke, kao sto je ovde uradjeno\n//Moglo je ovde da se pise i hard-cod podaci, jer props podrzava i to, ali nije pozeljno\n"]},"metadata":{},"sourceType":"module"}