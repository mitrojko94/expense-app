{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darko\\\\Desktop\\\\01-starting-setup\\\\src\\\\components\\\\ExpenseItem.js\";\n//Komponenta u Reactu je samo JS f-ja. Komponenta se pravi kombinacijom HTML, JS i CSS-a\n//Ime f-je skoro uvek da bude kao ime fajla. To je jako pozeljno\nimport \"./ExpenseItem.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseItem() {\n  //U JS, za datume, mesec krece od 0, tako da je 0 januar\n  const expenseDate = new Date(2022, 3, 9);\n  const expenseTitle = \"Car Insurance\";\n  const expenseAmount = 294.67;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expense-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Date: \", expenseDate.toISOString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-item__description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Title: \", expenseTitle]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__price\",\n        children: [\"Amount: $\", expenseAmount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n} //Eksportovao sam ime f-je, da bih mogao da koristim. Posto je export default, prilikom importa moze biti bilo koje ime\n\n\n_c = ExpenseItem;\nexport default ExpenseItem; //U React fajlovima uvek moram imati jedan root element po returnu, tipa moram imati samo return div, ne mogu imati return div, div i slicno. To nije dozvoljeno, da ima vise root elemenata po returnu\n//Da bih resio taj problem, stavim sve to u jedan div, stavim u zagrade sve to i radice. Kao sto je uradjeno u primeru iznad\n//Jako je bitno imati samo jedan root element, a u okviru njega, moze biti mnogo elemenata\n//U Reactu kad hocu da dodam neki css fajl, importujem samo putanju do njega i dole kad stavljam u kod, ne koristim class, vec className\n//To je zato sto ovo nije cist HTML, lici na njega, ali to je specijalna sintaksa JSX uvedena od strane React tima. Ali na kraju, je i dalje JS kod, zato su neki atributi isti. Nije class, jer to sluzi za oznaku klase u JS, zato je className\n//Radice i sa class, ali uvek koristiti className\n//Stavim iznad naredbe return neke varijable sa podacima i ubacim te varijable u naredbu return, pomocu React sintakse za to, a sintaksa je {ime_varijable}\n//U {} mogu da stavim sta god, bice pokrenuto na ekranu, tipa 1 + 1 ili Math.random()\n//U liniji koda 13, stavio sam expenseDate.toISOString(), jer dobijam Date kao objekat, nemam nista na ekranu, a moram da koristim metodu toISOString(), da bih konvertovao u string i da bih imao ispis na ekranu\n//props = properties\n//Podaci ne bi smelo da se smestaju ovde, vec da se uvezu spolja. Sacuvati podatke u fajl App.js i odatle ih uvesti ovde, pomocu props\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"sources":["C:/Users/Darko/Desktop/01-starting-setup/src/components/ExpenseItem.js"],"names":["ExpenseItem","expenseDate","Date","expenseTitle","expenseAmount","toISOString"],"mappings":";AAAA;AACA;AACA,OAAO,mBAAP;;;AAEA,SAASA,WAAT,GAAuB;AACrB;AACA,QAAMC,WAAW,GAAG,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAApB;AACA,QAAMC,YAAY,GAAG,eAArB;AACA,QAAMC,aAAa,GAAG,MAAtB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE;AAAA,2BAAYH,WAAW,CAACI,WAAZ,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA,8BACE;AAAA,8BAAYF,YAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,gCAA+CC,aAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,C,CAED;;;KAjBSJ,W;AAkBT,eAAeA,WAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA","sourcesContent":["//Komponenta u Reactu je samo JS f-ja. Komponenta se pravi kombinacijom HTML, JS i CSS-a\r\n//Ime f-je skoro uvek da bude kao ime fajla. To je jako pozeljno\r\nimport \"./ExpenseItem.css\";\r\n\r\nfunction ExpenseItem() {\r\n  //U JS, za datume, mesec krece od 0, tako da je 0 januar\r\n  const expenseDate = new Date(2022, 3, 9);\r\n  const expenseTitle = \"Car Insurance\";\r\n  const expenseAmount = 294.67;\r\n\r\n  return (\r\n    <div className=\"expense-item\">\r\n      <div>Date: {expenseDate.toISOString()}</div>\r\n      <div className=\"expense-item__description\">\r\n        <h2>Title: {expenseTitle}</h2>\r\n        <div className=\"expense-item__price\">Amount: ${expenseAmount}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n//Eksportovao sam ime f-je, da bih mogao da koristim. Posto je export default, prilikom importa moze biti bilo koje ime\r\nexport default ExpenseItem;\r\n\r\n//U React fajlovima uvek moram imati jedan root element po returnu, tipa moram imati samo return div, ne mogu imati return div, div i slicno. To nije dozvoljeno, da ima vise root elemenata po returnu\r\n//Da bih resio taj problem, stavim sve to u jedan div, stavim u zagrade sve to i radice. Kao sto je uradjeno u primeru iznad\r\n//Jako je bitno imati samo jedan root element, a u okviru njega, moze biti mnogo elemenata\r\n\r\n//U Reactu kad hocu da dodam neki css fajl, importujem samo putanju do njega i dole kad stavljam u kod, ne koristim class, vec className\r\n//To je zato sto ovo nije cist HTML, lici na njega, ali to je specijalna sintaksa JSX uvedena od strane React tima. Ali na kraju, je i dalje JS kod, zato su neki atributi isti. Nije class, jer to sluzi za oznaku klase u JS, zato je className\r\n//Radice i sa class, ali uvek koristiti className\r\n\r\n//Stavim iznad naredbe return neke varijable sa podacima i ubacim te varijable u naredbu return, pomocu React sintakse za to, a sintaksa je {ime_varijable}\r\n//U {} mogu da stavim sta god, bice pokrenuto na ekranu, tipa 1 + 1 ili Math.random()\r\n\r\n//U liniji koda 13, stavio sam expenseDate.toISOString(), jer dobijam Date kao objekat, nemam nista na ekranu, a moram da koristim metodu toISOString(), da bih konvertovao u string i da bih imao ispis na ekranu\r\n\r\n//props = properties\r\n//Podaci ne bi smelo da se smestaju ovde, vec da se uvezu spolja. Sacuvati podatke u fajl App.js i odatle ih uvesti ovde, pomocu props\r\n"]},"metadata":{},"sourceType":"module"}