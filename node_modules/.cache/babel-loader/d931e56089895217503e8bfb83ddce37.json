{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darko\\\\Desktop\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\NewExpense.js\",\n    _s = $RefreshSig$();\n\n//Namenjeno za formu koju korisnik unese\nimport \"./NewExpense.css\";\nimport ExpenseForm from \"./ExpenseForm\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewExpense = props => {\n  _s();\n\n  //Prikazivanje dugmeta, za dodavanje novih podataka, ali da ima i cancel dugme\n  const [isEditing, setIsEditing] = useState(false);\n\n  const saveExpenseDataHandler = enteredExpenseData => {\n    const expenseData = { ...enteredExpenseData,\n      id: Math.random().toString()\n    };\n    props.onAddExpense(expenseData);\n  }; //Handler za rukovanje tim dugmetom(Add New Expense). Koristim da kad kliknem dugme, da se pojavi forma za upisivanje\n\n\n  const startEditingHandler = () => {\n    setIsEditing(true);\n  }; //Ako je false onda mi se prikaze samo dugme, to je ovo !isEditing, a ako je true, onda mi se prikaze forma, to je ovo isEditing\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-expense\",\n    children: [!isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startEditingHandler,\n      children: \"Add New Expense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(ExpenseForm, {\n      onSaveExpenseData: saveExpenseDataHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewExpense, \"N4qUVpaen/rROL8jPu/4huFD8lA=\");\n\n_c = NewExpense;\nexport default NewExpense; //Ime je proizvoljno(linija koda 16), ali uvek pocinje sa on, jer ovo govori da vrednost za ovaj props treba da bude f-ja koja onda moze biti pozvana unutar ExpenseForm komponente\n//U liniji koda 6 stavim bilo koje ime varijable, kojoj dodelim f-ju sa parametrom(taj parametar su nasi podaci, podaci koje korisnik unese pomocu forme)\n//Tu proizvoljnu varijablu pozovem u liniji koda 16\n//Kad hocu da povezem dete i roditelja, prosledim ovde kao parametar props i pozovem props.ime_f-je u fajlu roditelja i prosledim kao parametar nase podatke(to je ovo expenseData)\n//Ako hocu da prenesem neke podatke iz jedne u drugu komponentu, a one nisu povezane, niti su roditelj-dete i obrnuto, za to koristim najblizu komponentu roditelja koja je u direktnoj ili indirektnoj vezi sa obe komponente\n//U ovom slucaju to je App komponenta, jer ima pristup i NewExpense i Expenses komponenti, jer prikazuje obe komponente u vracenom JSX kodu\n//Mi sada mozemo da sacuvamo nas State u toj najblizoj roditeljskoj komponenti koja ima pristup obema komponentama pomocu \"lifting\" dizanja naseg state gore tj. slanju naseg state iz NewExpense u App komponentu\n//Mi te podatke smo prosledili u komponentu App(roditelja) i onda odatle te podatke saljemo pomocu props u drugu komponentu(klasicna veza roditelj-dete)\n//Lifting State Up znaci slanje podatka iz komponente deteta u komponentu roditelja da se koristi tu ili da se prosledi odatle nekoj drugoj komponenti deteta\n//Lifting up radim onoliko koliko je potrebno tj. dok ne dodjem do komponente koja ima pristup obema komponentama koje generisu podatke, kao i komponentama koje traze te podatke, trebaju im\n\nvar _c;\n\n$RefreshReg$(_c, \"NewExpense\");","map":{"version":3,"sources":["C:/Users/Darko/Desktop/01-starting-setup/src/components/NewExpense/NewExpense.js"],"names":["ExpenseForm","useState","NewExpense","props","isEditing","setIsEditing","saveExpenseDataHandler","enteredExpenseData","expenseData","id","Math","random","toString","onAddExpense","startEditingHandler"],"mappings":";;;AAAA;AACA,OAAO,kBAAP;AACA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMK,sBAAsB,GAAIC,kBAAD,IAAwB;AACrD,UAAMC,WAAW,GAAG,EAClB,GAAGD,kBADe;AAElBE,MAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd;AAFc,KAApB;AAIAT,IAAAA,KAAK,CAACU,YAAN,CAAmBL,WAAnB;AACD,GAND,CAJ4B,CAY5B;;;AACA,QAAMM,mBAAmB,GAAG,MAAM;AAChCT,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD,CAb4B,CAiB5B;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,eACG,CAACD,SAAD,iBACC;AAAQ,MAAA,OAAO,EAAEU,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAIGV,SAAS,iBAAI,QAAC,WAAD;AAAa,MAAA,iBAAiB,EAAEE;AAAhC;AAAA;AAAA;AAAA;AAAA,YAJhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA3BD;;GAAMJ,U;;KAAAA,U;AA6BN,eAAeA,UAAf,C,CAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA","sourcesContent":["//Namenjeno za formu koju korisnik unese\r\nimport \"./NewExpense.css\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport { useState } from \"react\";\r\n\r\nconst NewExpense = (props) => {\r\n  //Prikazivanje dugmeta, za dodavanje novih podataka, ali da ima i cancel dugme\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n    props.onAddExpense(expenseData);\r\n  };\r\n\r\n  //Handler za rukovanje tim dugmetom(Add New Expense). Koristim da kad kliknem dugme, da se pojavi forma za upisivanje\r\n  const startEditingHandler = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  //Ako je false onda mi se prikaze samo dugme, to je ovo !isEditing, a ako je true, onda mi se prikaze forma, to je ovo isEditing\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      {!isEditing && (\r\n        <button onClick={startEditingHandler}>Add New Expense</button>\r\n      )}\r\n      {isEditing && <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n\r\n//Ime je proizvoljno(linija koda 16), ali uvek pocinje sa on, jer ovo govori da vrednost za ovaj props treba da bude f-ja koja onda moze biti pozvana unutar ExpenseForm komponente\r\n//U liniji koda 6 stavim bilo koje ime varijable, kojoj dodelim f-ju sa parametrom(taj parametar su nasi podaci, podaci koje korisnik unese pomocu forme)\r\n//Tu proizvoljnu varijablu pozovem u liniji koda 16\r\n\r\n//Kad hocu da povezem dete i roditelja, prosledim ovde kao parametar props i pozovem props.ime_f-je u fajlu roditelja i prosledim kao parametar nase podatke(to je ovo expenseData)\r\n\r\n//Ako hocu da prenesem neke podatke iz jedne u drugu komponentu, a one nisu povezane, niti su roditelj-dete i obrnuto, za to koristim najblizu komponentu roditelja koja je u direktnoj ili indirektnoj vezi sa obe komponente\r\n//U ovom slucaju to je App komponenta, jer ima pristup i NewExpense i Expenses komponenti, jer prikazuje obe komponente u vracenom JSX kodu\r\n//Mi sada mozemo da sacuvamo nas State u toj najblizoj roditeljskoj komponenti koja ima pristup obema komponentama pomocu \"lifting\" dizanja naseg state gore tj. slanju naseg state iz NewExpense u App komponentu\r\n\r\n//Mi te podatke smo prosledili u komponentu App(roditelja) i onda odatle te podatke saljemo pomocu props u drugu komponentu(klasicna veza roditelj-dete)\r\n\r\n//Lifting State Up znaci slanje podatka iz komponente deteta u komponentu roditelja da se koristi tu ili da se prosledi odatle nekoj drugoj komponenti deteta\r\n//Lifting up radim onoliko koliko je potrebno tj. dok ne dodjem do komponente koja ima pristup obema komponentama koje generisu podatke, kao i komponentama koje traze te podatke, trebaju im\r\n"]},"metadata":{},"sourceType":"module"}