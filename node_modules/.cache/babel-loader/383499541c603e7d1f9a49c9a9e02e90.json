{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darko\\\\Desktop\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\NewExpense.js\";\n//Namenjeno za formu koju korisnik unese\nimport \"./NewExpense.css\";\nimport ExpenseForm from \"./ExpenseForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewExpense = props => {\n  const saveExpenseDataHandler = enteredExpenseData => {\n    const expenseData = { ...enteredExpenseData,\n      id: Math.random().toString()\n    };\n    props.onAddExpense(expenseData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-expense\",\n    children: /*#__PURE__*/_jsxDEV(ExpenseForm, {\n      onSaveExpenseData: saveExpenseDataHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\n_c = NewExpense;\nexport default NewExpense; //Ime je proizvoljno(linija koda 16), ali uvek pocinje sa on, jer ovo govori da vrednost za ovaj props treba da bude f-ja koja onda moze biti pozvana unutar ExpenseForm komponente\n//U liniji koda 6 stavim bilo koje ime varijable, kojoj dodelim f-ju sa parametrom(taj parametar su nasi podaci, podaci koje korisnik unese pomocu forme)\n//Tu proizvoljnu varijablu pozovem u liniji koda 16\n//Kad hocu da povezem dete i roditelja, prosledim ovde kao parametar props i pozovem props.ime_f-je u fajlu roditelja i prosledim kao parametar nase podatke(to je ovo expenseData)\n//Ako hocu da prenesem neke podatke iz jedne u drugu komponentu, a one nisu povezane, niti su roditelj-dete i obrnuto, za to koristim najblizu komponentu roditelja koja je u direktnoj ili indirektnoj vezi sa obe komponente\n//U ovom slucaju to je App komponenta, jer ima pristup i NewExpense i Expenses komponenti, jer prikazuje obe komponente u vracenom JSX kodu\n//Mi sada mozemo da sacuvamo nas State u toj najblizoj roditeljskoj komponenti koja ima pristup obema komponentama pomocu \"lifting\" dizanja naseg state gore tj. slanju naseg state iz NewExpense u App komponentu\n\nvar _c;\n\n$RefreshReg$(_c, \"NewExpense\");","map":{"version":3,"sources":["C:/Users/Darko/Desktop/01-starting-setup/src/components/NewExpense/NewExpense.js"],"names":["ExpenseForm","NewExpense","props","saveExpenseDataHandler","enteredExpenseData","expenseData","id","Math","random","toString","onAddExpense"],"mappings":";AAAA;AACA,OAAO,kBAAP;AACA,OAAOA,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAMC,sBAAsB,GAAIC,kBAAD,IAAwB;AACrD,UAAMC,WAAW,GAAG,EAClB,GAAGD,kBADe;AAElBE,MAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd;AAFc,KAApB;AAIAP,IAAAA,KAAK,CAACQ,YAAN,CAAmBL,WAAnB;AACD,GAND;;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,2BACE,QAAC,WAAD;AAAa,MAAA,iBAAiB,EAAEF;AAAhC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAdD;;KAAMF,U;AAgBN,eAAeA,UAAf,C,CAEA;AACA;AACA;AAEA;AAEA;AACA;AACA","sourcesContent":["//Namenjeno za formu koju korisnik unese\r\nimport \"./NewExpense.css\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\n\r\nconst NewExpense = (props) => {\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n    props.onAddExpense(expenseData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n\r\n//Ime je proizvoljno(linija koda 16), ali uvek pocinje sa on, jer ovo govori da vrednost za ovaj props treba da bude f-ja koja onda moze biti pozvana unutar ExpenseForm komponente\r\n//U liniji koda 6 stavim bilo koje ime varijable, kojoj dodelim f-ju sa parametrom(taj parametar su nasi podaci, podaci koje korisnik unese pomocu forme)\r\n//Tu proizvoljnu varijablu pozovem u liniji koda 16\r\n\r\n//Kad hocu da povezem dete i roditelja, prosledim ovde kao parametar props i pozovem props.ime_f-je u fajlu roditelja i prosledim kao parametar nase podatke(to je ovo expenseData)\r\n\r\n//Ako hocu da prenesem neke podatke iz jedne u drugu komponentu, a one nisu povezane, niti su roditelj-dete i obrnuto, za to koristim najblizu komponentu roditelja koja je u direktnoj ili indirektnoj vezi sa obe komponente\r\n//U ovom slucaju to je App komponenta, jer ima pristup i NewExpense i Expenses komponenti, jer prikazuje obe komponente u vracenom JSX kodu\r\n//Mi sada mozemo da sacuvamo nas State u toj najblizoj roditeljskoj komponenti koja ima pristup obema komponentama pomocu \"lifting\" dizanja naseg state gore tj. slanju naseg state iz NewExpense u App komponentu\r\n"]},"metadata":{},"sourceType":"module"}