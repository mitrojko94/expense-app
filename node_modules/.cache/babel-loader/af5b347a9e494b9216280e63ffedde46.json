{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darko\\\\Desktop\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport \"./ExpenseForm.css\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  //Da bih sacuvao te podatke koje unosi korisinik, opet koristim useState. Stavio sam \"\", jer kad se ucita, nista se ne unosi\n  //Moguce je koristiti useState vise od jednom, tj. moguce da je imam vise States po komponenti f-je. Svi ti States u okviru jedne komponente ce biti odvojeni jedan od drugog. To znaci da ako azuriram title suma nece biti azurirana i obrnuto\n  //   const [enteredTitle, setEnteredTitle] = useState(\"\");\n  //   const [enteredAmount, setEnteredAmount] = useState(\"\");\n  //   const [enteredDate, setEnteredDate] = useState(\"\"); //Stavio sam kao parametar useState prazan string, jer je uvek string. Iako sam ja stavio da je type=\"number\", on uvek vraca string\n  //Upotreba samo jednog Steta za vise inputa, umesto tri Stetea\n  //Razlika je sto kad hocu da azuriram State, moram da azuriram sva tri, umesto samo jednog\n  const [userInput, setUserInput] = useState({\n    enteredTitle: \"\",\n    enteredAmount: \"\",\n    enteredDate: \"\"\n  }); //Klasican JS kod\n  //document.getElementById(\"\").addEventListener(\"click\", (event) => {})\n  //Funkcija za forme, za title. Uvek gledati da se zavrsava ime f-je sa Handler, to je neka praksa\n\n  const titleChangeHandler = event => {\n    //console.log(event);\n    //setEnteredTitle(event.target.value); //Trenutna uneta vrednost kao parametar i ovako je sacuvavam\n    //Koriscenje jednog Stetea, linija koda 28\n    // setUserInput({\n    //   ...userInput,\n    //   enteredTitle: event.target.value,\n    //Upotreba alternative za State. Prosledim arrow f-ju ovoj f-ji. Ova f-ja koja je prosledjena(arrow), odmah ce biti izvrsena od strane Reacta i kao parametar prima prethodni State za State za koji pozivam f-ju azuriranja\n    //Pod ovim prevState misli se na nas objekat koji sam napravio, linija koda 14, 15, 16\n    //Uvek raditi ovako kao sto je dole(linija koda 36-38), a ne kako je radjeno pre(linija koda 28-30), jer React zakazuje azuriranja Statea, ne radi to odmah\n    //Ako zakaze dosta azuriranja Statea u isto vreme, mogu dobiti nekoretne i netacne podatke, ako koristim pristup iznad(linija koda 28-30). Ako se koristi pristup dole ispod(linija koda 36-38) React garantuje da ce State koji on daje u f-ji uvek biti poslednji\n    setUserInput(prevState => {\n      return { ...prevState,\n        enteredTitle: event.target.value\n      };\n    }); // });\n  };\n\n  const amountChangeHandler = event => {\n    //setEnteredAmount(event.target.value);\n    setUserInput({ ...userInput,\n      enteredAmount: event.target.value\n    });\n  };\n\n  const dateChangeHandler = event => {\n    //setEnteredDate(event.target.value);\n    setUserInput({ ...userInput,\n      enteredDate: event.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.1\",\n          step: \"0.1\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"d6pWLpJgjJWBnqk3c5PozzZEARk=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm; //Posto sam u liniji koda 17 stavio type=\"date\" imaju mogucnost da biram datum\n//U liniji koda 9 stavio onChange da reagujem na svaku promenu, kad korisnik unese nesto. Prednost tog eventa je sto moze da se koristi za sve vrste inputa\n//Moguce je naravno koristiti tri Statea i radice, a takodje, ima i resenje, da se koristi samo jedan State umesto tri\n//Kako se to radi, pogledaj u liniji koda 10, pa sve do linije koda 49. To je alternativa upotrebi vise Stetea u jednoj komponenti f-je\n//Obicno se vise koristi upotreba vise Stetea po jednoj komponenti f-je\n//Kad god azuriram Steta i zavisim od prethodnog Stetea(tipa kao imam brojac koji povecavam za 1) ne treba da radim i da koristim useState kao sto je to uradjeno od linije koda 28 do linije koda 30\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["C:/Users/Darko/Desktop/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"names":["useState","ExpenseForm","userInput","setUserInput","enteredTitle","enteredAmount","enteredDate","titleChangeHandler","event","prevState","target","value","amountChangeHandler","dateChangeHandler"],"mappings":";;;AAAA,OAAO,mBAAP;AACA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC;AACzCI,IAAAA,YAAY,EAAE,EAD2B;AAEzCC,IAAAA,aAAa,EAAE,EAF0B;AAGzCC,IAAAA,WAAW,EAAE;AAH4B,GAAD,CAA1C,CATwB,CAexB;AACA;AAEA;;AACA,QAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpC;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACAL,IAAAA,YAAY,CAAEM,SAAD,IAAe;AAC1B,aAAO,EAAE,GAAGA,SAAL;AAAgBL,QAAAA,YAAY,EAAEI,KAAK,CAACE,MAAN,CAAaC;AAA3C,OAAP;AACD,KAFW,CAAZ,CAboC,CAgBpC;AACD,GAjBD;;AAmBA,QAAMC,mBAAmB,GAAIJ,KAAD,IAAW;AACrC;AACAL,IAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXG,MAAAA,aAAa,EAAEG,KAAK,CAACE,MAAN,CAAaC;AAFjB,KAAD,CAAZ;AAID,GAND;;AAQA,QAAME,iBAAiB,GAAIL,KAAD,IAAW;AACnC;AACAL,IAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXI,MAAAA,WAAW,EAAEE,KAAK,CAACE,MAAN,CAAaC;AAFf,KAAD,CAAZ;AAID,GAND;;AAQA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,QAAQ,EAAEJ;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,GAAG,EAAC,KAFN;AAGE,UAAA,IAAI,EAAC,KAHP;AAIE,UAAA,QAAQ,EAAEK;AAJZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAcE;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,GAAG,EAAC,YAFN;AAGE,UAAA,GAAG,EAAC,YAHN;AAIE,UAAA,QAAQ,EAAEC;AAJZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAyBE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,6BACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CArFD;;GAAMZ,W;;KAAAA,W;AAuFN,eAAeA,WAAf,C,CAEA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import \"./ExpenseForm.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst ExpenseForm = () => {\r\n  //Da bih sacuvao te podatke koje unosi korisinik, opet koristim useState. Stavio sam \"\", jer kad se ucita, nista se ne unosi\r\n  //Moguce je koristiti useState vise od jednom, tj. moguce da je imam vise States po komponenti f-je. Svi ti States u okviru jedne komponente ce biti odvojeni jedan od drugog. To znaci da ako azuriram title suma nece biti azurirana i obrnuto\r\n  //   const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  //   const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  //   const [enteredDate, setEnteredDate] = useState(\"\"); //Stavio sam kao parametar useState prazan string, jer je uvek string. Iako sam ja stavio da je type=\"number\", on uvek vraca string\r\n\r\n  //Upotreba samo jednog Steta za vise inputa, umesto tri Stetea\r\n  //Razlika je sto kad hocu da azuriram State, moram da azuriram sva tri, umesto samo jednog\r\n  const [userInput, setUserInput] = useState({\r\n    enteredTitle: \"\",\r\n    enteredAmount: \"\",\r\n    enteredDate: \"\",\r\n  });\r\n\r\n  //Klasican JS kod\r\n  //document.getElementById(\"\").addEventListener(\"click\", (event) => {})\r\n\r\n  //Funkcija za forme, za title. Uvek gledati da se zavrsava ime f-je sa Handler, to je neka praksa\r\n  const titleChangeHandler = (event) => {\r\n    //console.log(event);\r\n    //setEnteredTitle(event.target.value); //Trenutna uneta vrednost kao parametar i ovako je sacuvavam\r\n\r\n    //Koriscenje jednog Stetea, linija koda 28\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredTitle: event.target.value,\r\n\r\n    //Upotreba alternative za State. Prosledim arrow f-ju ovoj f-ji. Ova f-ja koja je prosledjena(arrow), odmah ce biti izvrsena od strane Reacta i kao parametar prima prethodni State za State za koji pozivam f-ju azuriranja\r\n    //Pod ovim prevState misli se na nas objekat koji sam napravio, linija koda 14, 15, 16\r\n    //Uvek raditi ovako kao sto je dole(linija koda 36-38), a ne kako je radjeno pre(linija koda 28-30), jer React zakazuje azuriranja Statea, ne radi to odmah\r\n    //Ako zakaze dosta azuriranja Statea u isto vreme, mogu dobiti nekoretne i netacne podatke, ako koristim pristup iznad(linija koda 28-30). Ako se koristi pristup dole ispod(linija koda 36-38) React garantuje da ce State koji on daje u f-ji uvek biti poslednji\r\n    setUserInput((prevState) => {\r\n      return { ...prevState, enteredTitle: event.target.value };\r\n    });\r\n    // });\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n    //setEnteredAmount(event.target.value);\r\n    setUserInput({\r\n      ...userInput,\r\n      enteredAmount: event.target.value,\r\n    });\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    //setEnteredDate(event.target.value);\r\n    setUserInput({\r\n      ...userInput,\r\n      enteredDate: event.target.value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__controls\">\r\n          <label>Title</label>\r\n          <input type=\"text\" onChange={titleChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense__controls\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.1\"\r\n            step=\"0.1\"\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__controls\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n\r\n//Posto sam u liniji koda 17 stavio type=\"date\" imaju mogucnost da biram datum\r\n//U liniji koda 9 stavio onChange da reagujem na svaku promenu, kad korisnik unese nesto. Prednost tog eventa je sto moze da se koristi za sve vrste inputa\r\n\r\n//Moguce je naravno koristiti tri Statea i radice, a takodje, ima i resenje, da se koristi samo jedan State umesto tri\r\n//Kako se to radi, pogledaj u liniji koda 10, pa sve do linije koda 49. To je alternativa upotrebi vise Stetea u jednoj komponenti f-je\r\n//Obicno se vise koristi upotreba vise Stetea po jednoj komponenti f-je\r\n\r\n//Kad god azuriram Steta i zavisim od prethodnog Stetea(tipa kao imam brojac koji povecavam za 1) ne treba da radim i da koristim useState kao sto je to uradjeno od linije koda 28 do linije koda 30\r\n"]},"metadata":{},"sourceType":"module"}