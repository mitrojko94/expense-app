{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darko\\\\Desktop\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport \"./ExpenseForm.css\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  //Da bih sacuvao te podatke koje unosi korisinik, opet koristim useState. Stavio sam \"\", jer kad se ucita, nista se ne unosi\n  //Moguce je koristiti useState vise od jednom, tj. moguce da je imam vise States po komponenti f-je. Svi ti States u okviru jedne komponente ce biti odvojeni jedan od drugog. To znaci da ako azuriram title suma nece biti azurirana i obrnuto\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\"); //Stavio sam kao parametar useState prazan string, jer je uvek string. Iako sam ja stavio da je type=\"number\", on uvek vraca string\n  //Upotreba samo jednog Steta za vise inputa, umesto tri Stetea\n  //Razlika je sto kad hocu da azuriram State, moram da azuriram sva tri, umesto samo jednog\n  //   const [userInput, setUserInput] = useState({\n  //     enteredTitle: \"\",\n  //     enteredAmount: \"\",\n  //     enteredDate: \"\",\n  //   });\n  //Klasican JS kod\n  //document.getElementById(\"\").addEventListener(\"click\", (event) => {})\n  //Funkcija za forme, za title. Uvek gledati da se zavrsava ime f-je sa Handler, to je neka praksa\n\n  const titleChangeHandler = event => {\n    //console.log(event);\n    setEnteredTitle(event.target.value); //Trenutna uneta vrednost kao parametar i ovako je sacuvavam\n    //Koriscenje jednog Stetea, linija koda 28\n    // setUserInput({\n    //   ...userInput,\n    //   enteredTitle: event.target.value,\n    //Upotreba alternative za State. Prosledim arrow f-ju ovoj f-ji. Ova f-ja koja je prosledjena(arrow), odmah ce biti izvrsena od strane Reacta i kao parametar prima prethodni State za State za koji pozivam f-ju azuriranja\n    //Pod ovim prevState misli se na nas objekat koji sam napravio, linija koda 14, 15, 16\n    //Uvek raditi ovako kao sto je dole(linija koda 38-40), a ne kako je radjeno pre(linija koda 28-30), jer React zakazuje azuriranja Statea, ne radi to odmah\n    //Ako zakaze dosta azuriranja Statea u isto vreme, mogu dobiti nekoretne i netacne podatke, ako koristim pristup iznad(linija koda 28-30). Ako se koristi pristup dole ispod(linija koda 36-38) React garantuje da ce State koji on daje u f-ji uvek biti poslednji\n    //Kad god mi azuriranje Statea zavisi od prethodnog Statea uvek da koristim sintaksu koja je ispod, linija koda 38 - 40\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredTitle: event.target.value };\n    // });\n    // // });\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value); // setUserInput({\n    //   ...userInput,\n    //   enteredAmount: event.target.value,\n    // });\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value); // setUserInput({\n    //   ...userInput,\n    //   enteredDate: event.target.value,\n    // });\n  }; //Funkcija za formu\n  //Desi se da kad pritisnem dugme da se stranica sama ucitava ponovo, jer pretrazivac automatski salje zahtev kad je forma aktivirana(pritisnuto dugme) ka serveru\n  //Za to koristimo preventDefault da se ne posalje zahtev i posto zahtev nije poslat, stranica se nece ponovo ucitati\n  //Imena title, amount, date su proizvoljna, zavisi od mene, dok vrednosti ovde(enteredTitle, enteredAmount, enteredDate) upucuje na varijable sa Stateom\n\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    props.onSaveExpenseData(expenseData);\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.1\",\n          step: \"0.1\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm; //Posto sam u liniji koda 17 stavio type=\"date\" imaju mogucnost da biram datum\n//U liniji koda 9 stavio onChange da reagujem na svaku promenu, kad korisnik unese nesto. Prednost tog eventa je sto moze da se koristi za sve vrste inputa\n//Moguce je naravno koristiti tri Statea i radice, a takodje, ima i resenje, da se koristi samo jedan State umesto tri\n//Kako se to radi, pogledaj u liniji koda 10, pa sve do linije koda 49. To je alternativa upotrebi vise Stetea u jednoj komponenti f-je\n//Obicno se vise koristi upotreba vise Stetea po jednoj komponenti f-je\n//Kad god azuriram Steta i zavisim od prethodnog Stetea(tipa kao imam brojac koji povecavam za 1) ne treba da radim i da koristim useState kao sto je to uradjeno od linije koda 28 do linije koda 30\n//Ako imam dugme koje je type=\"submit\", jos je to za formu, forma ce sama da aktivira dogadjaj koji mozemo da slusamo i to je submit event(onSubmit). Kad god se forma popuni, pritisne dugme submit, aktivira se neka f-ja\n//Two-ways binding jer ne slusamo samo da li imamo promena u input polju, vec vracamo State nazad u input, tako da kad promenim State promenimo i input\n//Prednost je da kad je forma poslata(pritisnuto dugme) mozemo da pozovemo tipa setEnteredTitle(\"\") i postavimo vrednost na prazan string, sto je i bilo na pocetku\n//Radeci ovo mi override onog sto je korisnik uneo nakon sto je forma poslata i onda imamo prazan input\n//Slanje podatka izmedju roditelja i deteta je moguce pomocu props\n//Mozemo napraviti svoje props, kojima cemo isto proslediti f-ju i koja ce omoguciti da prosledimo f-ju od komponente roditelja ka komponenti deteta i onda pozvati tu f-ju unutar komponente deteta\n//Kad pozovemo tu f-ju mozemo joj proslediti podatke kao parametar i tako se komunicira izmedju roditelja i deteta\n//Ako hocu da prenesem neke podatke iz jedne u drugu komponentu, a one nisu povezane, niti su roditelj-dete i obrnuto, za to koristim najblizu komponentu roditelja koja je u direktnoj ili indirektnoj vezi sa obe komponente\n//U ovom slucaju to je App komponenta, jer ima pristup i NewExpense i Expenses komponenti, jer prikazuje obe komponente u vracenom JSX kodu\n//Mi sada mozemo da sacuvamo nas State u toj najblizoj roditeljskoj komponenti koja ima pristup obema komponentama pomocu \"lifting\" dizanja naseg state gore tj. slanju naseg state iz NewExpense u App komponentu\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["C:/Users/Darko/Desktop/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"names":["useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData"],"mappings":"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","sourcesContent":["import \"./ExpenseForm.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst ExpenseForm = (props) => {\r\n  //Da bih sacuvao te podatke koje unosi korisinik, opet koristim useState. Stavio sam \"\", jer kad se ucita, nista se ne unosi\r\n  //Moguce je koristiti useState vise od jednom, tj. moguce da je imam vise States po komponenti f-je. Svi ti States u okviru jedne komponente ce biti odvojeni jedan od drugog. To znaci da ako azuriram title suma nece biti azurirana i obrnuto\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\"); //Stavio sam kao parametar useState prazan string, jer je uvek string. Iako sam ja stavio da je type=\"number\", on uvek vraca string\r\n\r\n  //Upotreba samo jednog Steta za vise inputa, umesto tri Stetea\r\n  //Razlika je sto kad hocu da azuriram State, moram da azuriram sva tri, umesto samo jednog\r\n  //   const [userInput, setUserInput] = useState({\r\n  //     enteredTitle: \"\",\r\n  //     enteredAmount: \"\",\r\n  //     enteredDate: \"\",\r\n  //   });\r\n\r\n  //Klasican JS kod\r\n  //document.getElementById(\"\").addEventListener(\"click\", (event) => {})\r\n\r\n  //Funkcija za forme, za title. Uvek gledati da se zavrsava ime f-je sa Handler, to je neka praksa\r\n  const titleChangeHandler = (event) => {\r\n    //console.log(event);\r\n    setEnteredTitle(event.target.value); //Trenutna uneta vrednost kao parametar i ovako je sacuvavam\r\n\r\n    //Koriscenje jednog Stetea, linija koda 28\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredTitle: event.target.value,\r\n\r\n    //Upotreba alternative za State. Prosledim arrow f-ju ovoj f-ji. Ova f-ja koja je prosledjena(arrow), odmah ce biti izvrsena od strane Reacta i kao parametar prima prethodni State za State za koji pozivam f-ju azuriranja\r\n    //Pod ovim prevState misli se na nas objekat koji sam napravio, linija koda 14, 15, 16\r\n    //Uvek raditi ovako kao sto je dole(linija koda 38-40), a ne kako je radjeno pre(linija koda 28-30), jer React zakazuje azuriranja Statea, ne radi to odmah\r\n    //Ako zakaze dosta azuriranja Statea u isto vreme, mogu dobiti nekoretne i netacne podatke, ako koristim pristup iznad(linija koda 28-30). Ako se koristi pristup dole ispod(linija koda 36-38) React garantuje da ce State koji on daje u f-ji uvek biti poslednji\r\n    //Kad god mi azuriranje Statea zavisi od prethodnog Statea uvek da koristim sintaksu koja je ispod, linija koda 38 - 40\r\n\r\n    // setUserInput((prevState) => {\r\n    //   return { ...prevState, enteredTitle: event.target.value };\r\n    // });\r\n    // // });\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredAmount: event.target.value,\r\n    // });\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredDate: event.target.value,\r\n    // });\r\n  };\r\n\r\n  //Funkcija za formu\r\n  //Desi se da kad pritisnem dugme da se stranica sama ucitava ponovo, jer pretrazivac automatski salje zahtev kad je forma aktivirana(pritisnuto dugme) ka serveru\r\n  //Za to koristimo preventDefault da se ne posalje zahtev i posto zahtev nije poslat, stranica se nece ponovo ucitati\r\n  //Imena title, amount, date su proizvoljna, zavisi od mene, dok vrednosti ovde(enteredTitle, enteredAmount, enteredDate) upucuje na varijable sa Stateom\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n\r\n    props.onSaveExpenseData(expenseData);\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__controls\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__controls\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.1\"\r\n            step=\"0.1\"\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__controls\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            value={enteredDate}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n\r\n//Posto sam u liniji koda 17 stavio type=\"date\" imaju mogucnost da biram datum\r\n//U liniji koda 9 stavio onChange da reagujem na svaku promenu, kad korisnik unese nesto. Prednost tog eventa je sto moze da se koristi za sve vrste inputa\r\n\r\n//Moguce je naravno koristiti tri Statea i radice, a takodje, ima i resenje, da se koristi samo jedan State umesto tri\r\n//Kako se to radi, pogledaj u liniji koda 10, pa sve do linije koda 49. To je alternativa upotrebi vise Stetea u jednoj komponenti f-je\r\n//Obicno se vise koristi upotreba vise Stetea po jednoj komponenti f-je\r\n\r\n//Kad god azuriram Steta i zavisim od prethodnog Stetea(tipa kao imam brojac koji povecavam za 1) ne treba da radim i da koristim useState kao sto je to uradjeno od linije koda 28 do linije koda 30\r\n\r\n//Ako imam dugme koje je type=\"submit\", jos je to za formu, forma ce sama da aktivira dogadjaj koji mozemo da slusamo i to je submit event(onSubmit). Kad god se forma popuni, pritisne dugme submit, aktivira se neka f-ja\r\n\r\n//Two-ways binding jer ne slusamo samo da li imamo promena u input polju, vec vracamo State nazad u input, tako da kad promenim State promenimo i input\r\n//Prednost je da kad je forma poslata(pritisnuto dugme) mozemo da pozovemo tipa setEnteredTitle(\"\") i postavimo vrednost na prazan string, sto je i bilo na pocetku\r\n//Radeci ovo mi override onog sto je korisnik uneo nakon sto je forma poslata i onda imamo prazan input\r\n\r\n//Slanje podatka izmedju roditelja i deteta je moguce pomocu props\r\n//Mozemo napraviti svoje props, kojima cemo isto proslediti f-ju i koja ce omoguciti da prosledimo f-ju od komponente roditelja ka komponenti deteta i onda pozvati tu f-ju unutar komponente deteta\r\n//Kad pozovemo tu f-ju mozemo joj proslediti podatke kao parametar i tako se komunicira izmedju roditelja i deteta\r\n\r\n//Ako hocu da prenesem neke podatke iz jedne u drugu komponentu, a one nisu povezane, niti su roditelj-dete i obrnuto, za to koristim najblizu komponentu roditelja koja je u direktnoj ili indirektnoj vezi sa obe komponente\r\n//U ovom slucaju to je App komponenta, jer ima pristup i NewExpense i Expenses komponenti, jer prikazuje obe komponente u vracenom JSX kodu\r\n//Mi sada mozemo da sacuvamo nas State u toj najblizoj roditeljskoj komponenti koja ima pristup obema komponentama pomocu \"lifting\" dizanja naseg state gore tj. slanju naseg state iz NewExpense u App komponentu\r\n"]},"metadata":{},"sourceType":"module"}