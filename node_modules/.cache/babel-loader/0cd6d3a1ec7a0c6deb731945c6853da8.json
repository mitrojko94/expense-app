{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darko\\\\Desktop\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\Expenses.js\",\n    _s = $RefreshSig$();\n\nimport ExpenseItem from \"./ExpenseItem\";\nimport Card from \"../UI/Card\";\nimport \"./Expenses.css\";\nimport ExpensesFilter from \"../NewExpense/ExpenseFilter\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expenses = props => {\n  _s();\n\n  const [filteredYear, setFilteredYear] = useState(\"2022\");\n\n  const filterChangeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n  }; //Filtriranje godina, pa da se prikaze sadrzaj\n\n\n  const filterExpenses = props.items.filter(expense => {\n    return expense.date.getFullYear().toString() === filteredYear;\n  }); //Moguce je JSX kod smestiti u varijablu, kao sto je uradjeno ispod. Ovo je treci nacin prikazivanja sadrzaja\n  //Sve smestiti u neku varijablu i kad nema nista sa porukom i kad ima nesto, sa tim kodom. I posle u liniji koda, dole, samo pozvati ime te varijable u {}\n\n  let expensesContent = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No expenses found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 25\n  }, this);\n\n  if (filterExpenses.length > 0) {\n    expensesContent = filterExpenses.map(expense => /*#__PURE__*/_jsxDEV(ExpenseItem, {\n      title: expense.title,\n      amount: expense.amount,\n      date: expense.date\n    }, expense.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        selected: filteredYear,\n        onChangeFilter: filterChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), expensesContent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Expenses, \"HP/DJyZUN2c6lsv/Nh50KjKN17k=\");\n\n_c = Expenses;\nexport default Expenses; //Alternativna sintaksa funkcija\n//Pomocu arrow f-ja se to radi, primer kod ispod:\n//const App = () => {}\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["C:/Users/Darko/Desktop/01-starting-setup/src/components/Expenses/Expenses.js"],"names":["ExpenseItem","Card","ExpensesFilter","useState","Expenses","props","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","filterExpenses","items","filter","expense","date","getFullYear","toString","expensesContent","length","map","title","amount","id"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,gBAAP;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,MAAD,CAAhD;;AAEA,QAAMK,mBAAmB,GAAIC,YAAD,IAAkB;AAC5CF,IAAAA,eAAe,CAACE,YAAD,CAAf;AACD,GAFD,CAH0B,CAO1B;;;AACA,QAAMC,cAAc,GAAGL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAoBC,OAAD,IAAa;AACrD,WAAOA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,OAA0CV,YAAjD;AACD,GAFsB,CAAvB,CAR0B,CAY1B;AACA;;AACA,MAAIW,eAAe,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAtB;;AAEA,MAAIP,cAAc,CAACQ,MAAf,GAAwB,CAA5B,EAA+B;AAC7BD,IAAAA,eAAe,GAAGP,cAAc,CAACS,GAAf,CAAoBN,OAAD,iBACnC,QAAC,WAAD;AAEE,MAAA,KAAK,EAAEA,OAAO,CAACO,KAFjB;AAGE,MAAA,MAAM,EAAEP,OAAO,CAACQ,MAHlB;AAIE,MAAA,IAAI,EAAER,OAAO,CAACC;AAJhB,OACOD,OAAO,CAACS,EADf;AAAA;AAAA;AAAA;AAAA,YADgB,CAAlB;AAQD;;AAED,sBACE;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA,8BACE,QAAC,cAAD;AACE,QAAA,QAAQ,EAAEhB,YADZ;AAEE,QAAA,cAAc,EAAEE;AAFlB;AAAA;AAAA;AAAA;AAAA,cADF,EAgCGS,eAhCH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyED,CApGD;;GAAMb,Q;;KAAAA,Q;AAsGN,eAAeA,QAAf,C,CAEA;AACA;AACA","sourcesContent":["import ExpenseItem from \"./ExpenseItem\";\r\nimport Card from \"../UI/Card\";\r\nimport \"./Expenses.css\";\r\nimport ExpensesFilter from \"../NewExpense/ExpenseFilter\";\r\nimport { useState } from \"react\";\r\n\r\nconst Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState(\"2022\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n\r\n  //Filtriranje godina, pa da se prikaze sadrzaj\r\n  const filterExpenses = props.items.filter((expense) => {\r\n    return expense.date.getFullYear().toString() === filteredYear;\r\n  });\r\n\r\n  //Moguce je JSX kod smestiti u varijablu, kao sto je uradjeno ispod. Ovo je treci nacin prikazivanja sadrzaja\r\n  //Sve smestiti u neku varijablu i kad nema nista sa porukom i kad ima nesto, sa tim kodom. I posle u liniji koda, dole, samo pozvati ime te varijable u {}\r\n  let expensesContent = <p>No expenses found.</p>;\r\n\r\n  if (filterExpenses.length > 0) {\r\n    expensesContent = filterExpenses.map((expense) => (\r\n      <ExpenseItem\r\n        key={expense.id}\r\n        title={expense.title}\r\n        amount={expense.amount}\r\n        date={expense.date}\r\n      />\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}\r\n        />\r\n\r\n        {/*RENDERING LISTS OF DATA*/}\r\n        {/*Kako se ubacuje da strane budu dinamicke, a ne hard-coded. Bitna lekcija*/}\r\n        {/*Sad cu da nas niz koji je u objektu, to je fajl App.js, pa nasi podaci, da prebacim ovde u map() i da budu dinamicki */}\r\n        {/*Prosledim proizvoljan parametar metodi map i pozovem posle samo komponentu ExpenseItem, koja sadrzi nase podatke i pozovem pomocu expense posle nase podatke */}\r\n        {/*Stavio sam umesto props.items filterExpense, jer time mogu godinu da menjam */}\r\n\r\n        {/*OUTPUTTING CONDITIONAL CONTENT\r\n        Conditional Content je prikazivanje razlicitog sadrzaja pod razlicitim uslovima. Tipa prikazujem stranicu A, B ili C, zavisi sta meni treba\r\n        Ako nam je taj sadrzaj prazan, ne prikazujem nista. Da bih to promenio, da prikazem poruku da nemam nista, moram da napravim neki uslov. To je u sledecoj liniji koda */}\r\n        {/*Koristim ternarni operator da to resim, kao sto se vidi u kodu ispod */}\r\n        {/*Mogu da stavim i pomocu and operatora(&&). Jer ako je uslov netacan, on preskace prvi element i odmah izvrsava sledeci. Misli se da preskace poruku za gresku i da izvrsava kod koji ima podatke */}\r\n        {/*Ako je uslov tacan, on ce odmah ispisati kod ili tekst posle AND operatora(&&) */}\r\n\r\n        {/* II NACIN */}\r\n        {/* {filterExpenses.length === 0 && <p>No expenses found.</p>}\r\n        {filterExpenses.length > 0 &&\r\n          filterExpenses.map((expense) => (\r\n            <ExpenseItem\r\n              key={expense.id}\r\n              title={expense.title}\r\n              amount={expense.amount}\r\n              date={expense.date}\r\n            />\r\n          ))} */}\r\n\r\n        {/* III NACIN */}\r\n        {expensesContent}\r\n\r\n        {/* I NACIN */}\r\n        {/* {filterExpenses.length === 0 ? (\r\n          <p>No expenses found.</p>\r\n        ) : (\r\n          filterExpenses.map((expense) => (\r\n            <ExpenseItem\r\n              key={expense.id}\r\n              title={expense.title}\r\n              amount={expense.amount}\r\n              date={expense.date}\r\n            />\r\n          ))\r\n        )} */}\r\n\r\n        {/* <ExpenseItem\r\n          title={props.items[0].title}\r\n          amount={props.items[0].amount}\r\n          date={props.items[0].date}\r\n        />\r\n        <ExpenseItem\r\n          title={props.items[1].title}\r\n          amount={props.items[1].amount}\r\n          date={props.items[1].date}\r\n        />\r\n        <ExpenseItem\r\n          title={props.items[2].title}\r\n          amount={props.items[2].amount}\r\n          date={props.items[2].date}\r\n        />\r\n        <ExpenseItem\r\n          title={props.items[3].title}\r\n          amount={props.items[3].amount}\r\n          date={props.items[3].date}\r\n        /> */}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n\r\n//Alternativna sintaksa funkcija\r\n//Pomocu arrow f-ja se to radi, primer kod ispod:\r\n//const App = () => {}\r\n"]},"metadata":{},"sourceType":"module"}